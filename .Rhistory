ls
clear
sl
# Install and load the ISLR package if not already installed
install.packages("ISLR")
library(ISLR)
data("Carseats")
# Create a binary variable 'High' based on Sales
Carseats$High <- ifelse(Carseats$Sales >= 8, "Yes", "No")
Carseats$High <- as.factor(Carseats$High)  # Convert to factor for classification
# Split the data
sample_index <- sample(seq_len(nrow(Carseats)), size = 0.7 * nrow(Carseats))
train_data <- Carseats[sample_index, ]
test_data <- Carseats[-sample_index, ]
# Install and load the tree package if not already installed
install.packages("tree")
library(tree)
# Fit the decision tree model on training data
tree_model <- tree(High ~ . -Sales, data = train_data)
summary(tree_model)
# Plot the decision tree
plot(tree_model)
text(tree_model, pretty = 0)
# Predict on the test data
tree_pred <- predict(tree_model, test_data, type = "class")
# Confusion matrix and accuracy
confusion_matrix <- table(Predicted = tree_pred, Actual = test_data$High)
confusion_matrix
accuracy <- sum(diag(confusion_matrix)) / sum(confusion_matrix)
accuracy * 100
# Cross-validation for pruning
cv_tree <- cv.tree(tree_model, FUN = prune.misclass)
plot(cv_tree$size, cv_tree$dev, type = "b", xlab = "Tree Size", ylab = "Misclassification Error")
# Prune the tree to the optimal size
optimal_size <- which.min(cv_tree$dev)
pruned_tree <- prune.misclass(tree_model, best = optimal_size)
plot(pruned_tree)
# Cross-validation for pruning
cv_tree <- cv.tree(tree_model, FUN = prune.misclass)
plot(cv_tree$size, cv_tree$dev, type = "b", xlab = "Tree Size", ylab = "Misclassification Error")
# Prune the tree to the optimal size
optimal_size <- which.min(cv_tree$dev)
pruned_tree <- prune.misclass(tree_model, best = optimal_size)
plot(pruned_tree)
text(pruned_tree, pretty = 0)
# Predict on test data with pruned tree
pruned_tree_pred <- predict(pruned_tree, test_data, type = "class")
pruned_conf_matrix <- table(Predicted = pruned_tree_pred, Actual = test_data$High)
pruned_accuracy <- sum(diag(pruned_conf_matrix)) / sum(pruned_conf_matrix)
pruned_conf_matrix
pruned_accuracy * 100
# Install and load the ISLR package
install.packages("ISLR")
library(ISLR)
data("Smarket")
install.packages("ISLR")
library(ISLR)
data("Smarket")
# View structure and summary of the data
str(Smarket)
summary(Smarket)
# Install and load ISLR package if not installed
install.packages("ISLR")
library(ISLR)
# Load the Khan dataset
data("Khan")
data("Khan")
library(ISLR)
data("Khan")
str(Khan)
dim(Khan$xtrain)
dim(Khan$xtest)
# Prepare the data
train_data <- data.frame(Khan$xtrain)
train_data$Class <- as.factor(Khan$ytrain)
test_data <- data.frame(Khan$xtest)
test_data$Class <- as.factor(Khan$ytest)
install.packages("e1071")
library(e1071)
svm_model <- svm(Class ~ ., data = train_data, kernel = "linear", cost = 10, scale = FALSE)
summary(svm_model)
# Predict on test data
svm_pred <- predict(svm_model, test_data)
# Confusion matrix and accuracy
confusion_matrix <- table(Predicted = svm_pred, Actual = test_data$Class)
confusion_matrix
accuracy <- sum(diag(confusion_matrix)) / sum(confusion_matrix)
accuracy * 100
# SVM with radial kernel
svm_model_radial <- svm(Class ~ ., data = train_data, kernel = "radial", cost = 10, gamma = 0.1)
svm_pred_radial <- predict(svm_model_radial, test_data)
# Confusion matrix and accuracy for radial kernel
confusion_matrix_radial <- table(Predicted = svm_pred_radial, Actual = test_data$Class)
confusion_matrix_radial
accuracy_radial <- sum(diag(confusion_matrix_radial)) / sum(confusion_matrix_radial)
accuracy_radial * 100
accuracy_radial <- sum(diag(confusion_matrix_radial)) / sum(confusion_matrix_radial)
accuracy_radial * 100
# Fit an SVM model on the training data
svm_model <- svm(Class ~ ., data = train_data, kernel = "linear", cost = 10, scale = FALSE)
summary(svm_model)
# Predict on test data
svm_pred <- predict(svm_model, test_data)
# Confusion matrix and accuracy
confusion_matrix <- table(Predicted = svm_pred, Actual = test_data$Class)
confusion_matrix
accuracy <- sum(diag(confusion_matrix)) / sum(confusion_matrix)
accuracy * 100
# SVM with radial kernel
svm_model_radial <- svm(Class ~ ., data = train_data, kernel = "radial", cost = 10, gamma = 0.1)
svm_pred_radial <- predict(svm_model_radial, test_data)
# Confusion matrix and accuracy for radial kernel
confusion_matrix_radial <- table(Predicted = svm_pred_radial, Actual = test_data$Class)
confusion_matrix_radial
accuracy_radial <- sum(diag(confusion_matrix_radial)) / sum(confusion_matrix_radial)
accuracy_radial * 100
# Load the USArrests dataset
data("USArrests")
# View the structure of the data
str(USArrests)
# Scale the data for PCA
us_data <- scale(USArrests)
pca_result <- prcomp(us_data, scale. = TRUE)
summary(pca_result)
# Scree plot to show variance explained
plot(pca_result, type = "l", main = "Scree Plot")
# Cumulative variance plot
variance_explained <- cumsum(pca_result$sdev^2 / sum(pca_result$sdev^2))
plot(variance_explained, type = "b", xlab = "Principal Component", ylab = "Cumulative Proportion of Variance Explained")
# Biplot for the first two principal components
biplot(pca_result, scale = 0)
# Load NC160 data (assuming it's in CSV format and saved locally)
nc160_data <- read.csv("path_to_nc160_data.csv")
